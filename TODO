1. Try having an in memory cache for single resources like movie, actor, credits etc...
1. XXX Basic implementation done, check wheter to clear after a certain size or time XXX
1a. Have also an in memory cache for the user, and reset each time a new resource gets created
2. Use Event Emitters to log and/or process data/errors eg. const EventEmitter = require('events'); emm = new EventEmitter(); emm.on('eventName', function)
3. Try #2 with setImmediate for async
4. Have a better folder structure for sequelize!!!
XXX Done using sequelize-cli XXX

For auth:
1. Decide how to hash the passwords, either with bcrypt or argon2, the latter is protected against time attacks
XXX Went for bcrypt, it's protected against time attacks as well XXX
2. Evaluate if I need passportJS or instead create myself a middleware
2. XXX My own XXX
3a. Implement JWT <- DONE
3b. Invalidate JWT or cookies after a while
3c. should send back the token on register or ask to signIn
4. In the end the only unprotected routes will be the auth ones
4. XXX for now only favs, decide later if others need auth
5. Create custom auth middleware
5. XXX DONE

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Decide how to handle the favs endpoint:
  - reading the JWT everytime to have the user id;
  - ^^^ yes, done
  - check the user id that it exists;
  - ^^^ done, if it has a token it exists...
  - finally check that the user has that movie as a fav before deleting the entry
  - ^^^ no need, only a user with a valid token can see his favs
  - Add a field in the DB to put a movie in a watchlist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




------------------------------------------------------------------------------------------
1. Write some documentation
2. Write the README.md
------------------------------------------------------------------------------------------

For user favs:
1. Create a PATCH handler for the 'seen' + 'description' fields
1. XXX OK. XXX
2. FE side decide how to handle empty description since "" is falsy, maybe just " "
3. GET route for retrieving all of one user's favs
3. XXX OK. XXX

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EXTRAs:
1. Having an option for the user to download the entire list of favs.
1a. Would be nice to have a PDF generator, with the image, the cast, and some film info, plus the user's description.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


sequelizeCLI:
https://medium.com/@andrewoons/how-to-define-sequelize-associations-using-migrations-de4333bf75a7

with sequelize-cli we can create a model/migration, which creates a index.js that will export the entire db object!
We can just import that wherever we need it.
Just remember to do a sequelize db:migrate the first time.


```
    const db = require("../../../models")
    
  await db.User.create({firstName: 'AAA', email: 'email@test.com', passwordDigest: 'asdasda'})
  await db.UserFavourite.create({movieRefId: 2243,movieTitle: "adasd",userId: 2,moviePosterPath:"asdada"})
  await db.UserFavourite.create({movieRefId: 22343,movieTitle: "aASDASDdasd",userId: 3,moviePosterPath:"aDGARREFEEFsdada"})
  const usQ = await db.User.findByPk(1)
  const usFav = await usQ.getUserFavourites()
```

```
With the below we include also the user's favourites films.
    const user = await db.User.findByPk(15, {
      include: [{ model: db.UserFavourite }],
    });
```